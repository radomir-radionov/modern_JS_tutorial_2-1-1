///  Modern JavaScript tutorial  ///

// ЧАСТЬ 2
// Браузер: документ, события, интерфейсы
// Изучаем работу со страницей – как получать элементы, манипулировать их размерами,
// динамически создавать интерфейсы и взаимодействовать с посетителем.

// 1.1 Браузерное окружение, спецификации

// Каждая среда предоставляет свою функциональность, которую спецификация JavaScript называет окружением.
// Окружение предоставляет свои объекты и дополнительные функции, в дополнение базовым языковым.
// имеется корневой объект window, который выступает в 2 ролях:
// Во-первых, это глобальный объект(Глобальный объект предоставляет переменные и функции, доступные в любом месте программы.)
// для JavaScript-кода, об этом более подробно говорится в главе Глобальный объект.
// Во-вторых, он также представляет собой окно браузера и располагает методами для управления им.

// DOM (Document Object Model)
// Document Object Model, сокращённо DOM – объектная модель документа, которая представляет все содержимое
//  страницы в виде объектов, которые можно менять.
//  Объект document – основная «входная точка». С его помощью мы можем что-то создавать или менять на странице.
//  DOM – не только для браузеров
// Спецификация DOM описывает структуру документа и предоставляет объекты для манипуляций со страницей.

// BOM (Browser Object Model)
// Объектная модель браузера (Browser Object Model, BOM) – это дополнительные объекты,
//  предоставляемые браузером (окружением), чтобы работать со всем, кроме документа.
// Например:
// Объект navigator даёт информацию о самом браузере и операционной системе. Среди множества его
// свойств самыми известными являются: navigator.userAgent – информация о текущем браузере,
// и navigator.platform – информация о платформе (может помочь в понимании того, в какой ОС открыт браузер – Windows/Linux/Mac и так далее).
// Объект location позволяет получить текущий URL и перенаправить браузер по новому адресу.

// Итого
// Говоря о стандартах, у нас есть:
// Спецификация DOM
// описывает структуру документа, манипуляции с контентом и события, подробнее на https://dom.spec.whatwg.org.
// Спецификация CSSOM
// Описывает файлы стилей, правила написания стилей и манипуляций с ними, а также то, как это всё связано со страницей,
// подробнее на https://www.w3.org/TR/cssom-1/.
// Спецификация HTML
// Описывает язык HTML (например, теги) и BOM (объектную модель браузера) – разные функции браузера: setTimeout, alert,
// location и так далее, подробнее на https://html.spec.whatwg.org. Тут берётся за основу спецификация DOM и
// расширяется дополнительными свойствами и методами.

// 1.2 DOM-дерево

// Основой HTML-документа являются теги.
// В соответствии с объектной моделью документа («Document Object Model», коротко DOM), каждый HTML-тег является объектом.
// Вложенные теги являются «детьми» родительского элемента. Текст, который находится внутри тега, также является объектом.
// DOM – это представление HTML-документа в виде дерева тегов.
// Каждый узел этого дерева – это объект.
// Теги являются узлами-элементами (или просто элементами). Они образуют структуру дерева: <html> – это корневой узел,
// <head> и <body> его дочерние узлы и т.д.
// Текст внутри элементов образует текстовые узлы, обозначенные как #text. Текстовый узел содержит в себе только строку текста.
// У него не может быть потомков, т.е. он находится всегда на самом нижнем уровне.
// Существует всего два исключения из этого правила:
// По историческим причинам пробелы и перевод строки перед тегом <head> игнорируются
// Если мы записываем что-либо после закрывающего тега </body>, браузер автоматически перемещает эту запись в конец body,
//  поскольку спецификация HTML требует, чтобы всё содержимое было внутри <body>. Поэтому после закрывающего тега </body>
//  не может быть никаких пробелов.

//  Автоисправление
// Если браузер сталкивается с некорректно написанным HTML-кодом, он автоматически корректирует его при построении DOM.
// Таблицы всегда содержат <tbody></tbody>

// Другие типы узлов
// Есть и некоторые другие типы узлов, кроме элементов и текстовых узлов.
// Например, узел-комментарий:
// Все, что есть в HTML, даже комментарии, является частью DOM.

// Существует 12 типов узлов. Но на практике мы в основном работаем с 4 из них:

// document – «входная точка» в DOM.
// узлы-элементы – HTML-теги, основные строительные блоки.
// текстовые узлы – содержат текст.
// комментарии – иногда в них можно включить информацию, которая не будет показана, но доступна в DOM для чтения JS.
// В правой части инструментов разработчика находятся следующие подразделы:
// Styles – здесь мы видим CSS, применённый к текущему элементу: правило за правилом, включая встроенные стили (выделены серым).
// Почти всё можно отредактировать на месте, включая размеры, внешние и внутренние отступы.
// Computed – здесь мы видим итоговые CSS-свойства элемента, которые он приобрёл в результате применения всего каскада стилей
// (в том числе унаследованные свойства и т.д.).
// Event Listeners – в этом разделе мы видим обработчики событий, привязанные к DOM-элементам (мы поговорим о них в следующей части учебника).
// … и т.д.

// Итого;
// HTML/XML документы представлены в браузере в виде DOM-дерева.
// Теги становятся узлами-элементами и формируют структуру документа.
// Текст становится текстовыми узлами.
// … и т.д. Всё, что записано в HTML, есть и в DOM-дереве, даже комментарии.
// Для изменения элементов или проверки DOM-дерева мы можем использовать инструменты разработчика в браузере.

// 1.3 Навигация по DOM-элементам

// DOM позволяет нам делать что угодно с элементами и их содержимым, но для начала нужно получить соответствующий DOM-объект.
// Все операции с DOM начинаются с объекта document. Это главная «точка входа» в DOM. Из него мы можем получить доступ к любому узлу.
// document.body может быть равен null
// В DOM значение null значит «не существует» или «нет такого узла».
// Дети: childNodes, firstChild, lastChild
// Коллекция childNodes содержит список всех детей, включая текстовые узлы.
// Свойства firstChild и lastChild обеспечивают быстрый доступ к первому и последнему дочернему элементу.

// DOM-коллекции
// Как мы уже видели, childNodes похож на массив. На самом деле это не массив, а коллекция – особый перебираемый объект-псевдомассив.
// Для перебора коллекции мы можем использовать for..of:
// for (let node of document.body.childNodes) {
//   alert(node); // покажет все узлы из коллекции
// }
// Это работает, потому что коллекция является перебираемым объектом (есть требуемый для этого метод Symbol.iterator).

// Методы массивов не будут работать, потому что коллекция – это не массив:
